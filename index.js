import express from "express";
import cors from "cors";
import dotenv from "dotenv";

dotenv.config();
const app = express();

// Middlewares
app.use(cors());
app.use(express.json());

console.log("üîê Identifiant charg√© :", process.env.GD_USER);


// Route de test
app.get("/", (req, res) => {
  res.send("Serveur actif ‚úÖ");
});

// -----------------------------------------------------
// üîπ Route r√©elle Geodynamics - Check-in
// -----------------------------------------------------
app.post("/api/geodynamics/checkin", async (req, res) => {
  const { employeeId, vehicleId, timestamp } = req.body; // ‚¨ÖÔ∏è SUPPRIMER lat, lon

  if (!employeeId || !timestamp) { // ‚¨ÖÔ∏è SUPPRIMER la v√©rification de lat/lon
    return res.status(400).json({ error: "Param√®tres manquants." });
  }

  // Construction du header Basic Auth
  const rawAuth = `${process.env.GD_USER}|${process.env.GD_COMPANY}:${process.env.GD_PASS}`;
  const encodedAuth = Buffer.from(rawAuth).toString("base64");

  // ‚¨ÖÔ∏è CHANGER l'URL pour l'endpoint r√©el des clockings
  const apiUrl = "https://api.intellitracer.be/api/v2/clockings";

  console.log("üîê Headers d'authentification:", {
    "Authorization": `Basic ${encodedAuth}`,
    "Content-Type": "application/json",
  });
  console.log("üåê URL appel√©e:", apiUrl);
  console.log("üì¶ Payload envoy√©:", {
    userId: employeeId,
    vehicleId: vehicleId || "456", // ‚¨ÖÔ∏è UTILISER vehicleId
    timestamp,
    // ‚¨ÖÔ∏è SUPPRIMER latitude et longitude
  });

  try {
    // Requ√™te vers Geodynamics
    const response = await fetch(apiUrl, {
      method: "POST",
      headers: {
        "Authorization": `Basic ${encodedAuth}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        userId: employeeId,
        vehicleId: vehicleId || "456", // ‚¨ÖÔ∏è UTILISER vehicleId
        timestamp,
        // ‚¨ÖÔ∏è SUPPRIMER latitude et longitude
      }),
    });

    // ... reste du code inchang√©
  } catch (error) {
    console.error("‚ùå Erreur lors de l‚Äôenvoi Geodynamics:", error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// -----------------------------------------------------
// üîπ Route r√©elle Geodynamics - Check-out
// -----------------------------------------------------
app.post("/api/geodynamics/checkout", async (req, res) => {
  const { employeeId, vehicleId, timestamp } = req.body; // ‚¨ÖÔ∏è SUPPRIMER lat, lon

  if (!employeeId || !timestamp) { // ‚¨ÖÔ∏è SUPPRIMER la v√©rification de lat/lon
    return res.status(400).json({ error: "Param√®tres manquants." });
  }

  const rawAuth = `${process.env.GD_USER}|${process.env.GD_COMPANY}:${process.env.GD_PASS}`;
  const encodedAuth = Buffer.from(rawAuth).toString("base64");

  // ‚¨ÖÔ∏è CHANGER l'URL pour l'endpoint r√©el des clockings
  const apiUrl = "https://api.intellitracer.be/api/v2/clockings";

  console.log("üîê Headers d'authentification:", {
    "Authorization": `Basic ${encodedAuth}`,
    "Content-Type": "application/json",
  });
  console.log("üåê URL appel√©e:", apiUrl);
  console.log("üì¶ Payload envoy√©:", {
    userId: employeeId,
    vehicleId: vehicleId || "456", // ‚¨ÖÔ∏è UTILISER vehicleId
    timestamp,
    // ‚¨ÖÔ∏è SUPPRIMER latitude et longitude
  });

  try {
    const response = await fetch(apiUrl, {
      method: "POST",
      headers: {
        "Authorization": `Basic ${encodedAuth}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        userId: employeeId,
        vehicleId: vehicleId || "456", // ‚¨ÖÔ∏è UTILISER vehicleId
        timestamp,
        // ‚¨ÖÔ∏è SUPPRIMER latitude et longitude
      }),
    });

    if (!response.ok) {
      console.error("‚ùå Erreur API Geodynamics (checkout):", response.status, data);
      return res.status(response.status).json({ success: false, error: data });
    }

    console.log("‚úÖ Envoi r√©ussi (CHECK-OUT) pour", employeeId);
    res.json({ success: true, data });
  } catch (error) {
    console.error("‚ùå Erreur lors de l‚Äôenvoi Geodynamics (checkout):", error);
    res.status(500).json({ success: false, error: error.message });
  }
});




// Lancement du serveur
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`‚úÖ Serveur d√©marr√© sur http://localhost:${PORT}`);
});
